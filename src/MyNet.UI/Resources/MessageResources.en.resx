<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ItemModificationCancellingQuestion" xml:space="preserve">
    <value>Items have been changed. They will be lost forever. Will you continue ?</value>
  </data>
  <data name="CopyInClipBoardSuccess" xml:space="preserve">
    <value>The item has been copied in clipboard.
Use Ctrl + V, or Right click then Paste to recover the element.</value>
  </data>
  <data name="ItemSavingQuestion" xml:space="preserve">
    <value>Items have been changed. Do you want to save them ?</value>
  </data>
  <data name="XItemsRemovingQuestion" xml:space="preserve">
    <value>You are about to permanently delete an item. Do you want to continue ?</value>
  </data>
  <data name="XItemsRemovingQuestionPlural" xml:space="preserve">
    <value>You are about to permanently delete {0} items. Do you want to continue ?</value>
  </data>
  <data name="FieldsInvalidError" xml:space="preserve">
    <value>Fields filled in are not correct.</value>
  </data>
  <data name="UnexpectedXError" xml:space="preserve">
    <value>An unexpected error has occurred : {0}</value>
  </data>
  <data name="CopyInClipBoardError" xml:space="preserve">
    <value>The item could not be copied in clipboard. Consult the logs for more information.</value>
  </data>
  <data name="FileXOpenError" xml:space="preserve">
    <value>File "{0}" could not been opened. Consult the logs for more information.</value>
  </data>
  <data name="FileXNotFoundError" xml:space="preserve">
    <value>File not found : "{0}".</value>
  </data>
  <data name="FileRemovingQuestion" xml:space="preserve">
    <value>File will be removed. Do you want continue ?</value>
  </data>
  <data name="FieldXMustBeValidEmailAddressError" xml:space="preserve">
    <value>The field "{0}" does not correspond to a valid e-mail address.</value>
  </data>
  <data name="FieldXMustBeValidPhoneNumberError" xml:space="preserve">
    <value>The field "{0}" does not correspond to a valid telephone number.</value>
  </data>
  <data name="FieldXMustHaveMaxLengthYError" xml:space="preserve">
    <value>The field "{0}" must not exceed {1} characters.</value>
  </data>
  <data name="FieldXIsRequiredError" xml:space="preserve">
    <value>The "{0}" field is required.</value>
  </data>
  <data name="FieldXMustHaveUniqueItemsError" xml:space="preserve">
    <value>The Collection "{0}" must be have only differents elements.</value>
  </data>
  <data name="FieldXMustBeContainOneItemAtLeastError" xml:space="preserve">
    <value>The Collection "{0}" must contain one item at least.</value>
  </data>
  <data name="FieldXMustBeLowerThanYError" xml:space="preserve">
    <value>The field "{0}" must be less than {1}.</value>
  </data>
  <data name="FieldXMustBeUpperThanYError" xml:space="preserve">
    <value>The field "{0}" must be greater than {1}.</value>
  </data>
  <data name="FieldXMustBeBetweenYAndZError" xml:space="preserve">
    <value>The field "{0}" must be between {1} and {2}.</value>
  </data>
  <data name="FieldXMustBeAnValidFilePathError" xml:space="preserve">
    <value>The field "{0}" does not correspond to a valid file path.</value>
  </data>
  <data name="FieldXMustContainExistingFolderError" xml:space="preserve">
    <value>Unable to find a part of path "{0}".</value>
  </data>
  <data name="FieldXMustContainsExistingFileError" xml:space="preserve">
    <value>The file specified in field "{0}" has not been found.</value>
  </data>
  <data name="FileXAlreadyUsedError" xml:space="preserve">
    <value>File "{0}" is used by another process</value>
  </data>
  <data name="FieldXMustBeInPastError" xml:space="preserve">
    <value>The field "{0}" must be in past.</value>
  </data>
  <data name="NotEnoughSpaceDisk" xml:space="preserve">
    <value>Not enough available disk space to do this action.</value>
  </data>
  <data name="ItemXNotFoundException" xml:space="preserve">
    <value>The item "{0}" has not been found.</value>
  </data>
  <data name="FieldStartDateMustBeLowerOrEqualsThanEndDateError" xml:space="preserve">
    <value>Start date must be less or equal than end date.</value>
  </data>
  <data name="FieldEndDateMustBeUpperOrEqualsThanStartDateError" xml:space="preserve">
    <value>End date must be greater or equal than start date.</value>
  </data>
  <data name="FieldXMustBeLowerOrEqualsThanYError" xml:space="preserve">
    <value>The field "{0}" must be less or equal than {1}.</value>
  </data>
  <data name="FieldXMustBeUpperOrEqualsThanYError" xml:space="preserve">
    <value>The field "{0}" must be greater or equal than {1}.</value>
  </data>
  <data name="DirectoryXNotFoundError" xml:space="preserve">
    <value>Directory not found : "{0}".</value>
  </data>
  <data name="FieldEndTimeMustBeUpperThanStartTimeError" xml:space="preserve">
    <value>End time must be greater than start time.</value>
  </data>
  <data name="FieldEndTimeMustBeLowerThanStartTimeError" xml:space="preserve">
    <value>End time must be lower than start time.</value>
  </data>
  <data name="FileXRemovedSuccess" xml:space="preserve">
    <value>File "{0}" has been removed wih success.</value>
  </data>
  <data name="FieldXMustBeDifferentOfFieldYError" xml:space="preserve">
    <value>The field "{0}" must be different of field "{1}".</value>
  </data>
  <data name="XItemsHasBeenModifiedSuccessPlural" xml:space="preserve">
    <value># items has been modified.</value>
  </data>
  <data name="XItemsHasBeenModifiedSuccess" xml:space="preserve">
    <value># item has been modified.</value>
  </data>
  <data name="FileHasInvalidExtensionError" xml:space="preserve">
    <value>The specified extension file is invalid.</value>
  </data>
  <data name="XItemsAddedSuccess" xml:space="preserve">
    <value>1 item have been added.</value>
  </data>
  <data name="XItemsAddedSuccessPlural" xml:space="preserve">
    <value>{0} items have been added.</value>
  </data>
</root>